package gcode

import (
	"bufio"
	"fmt"
	"io"
)

type Config struct {
	PenUp    int
	FeedRate int
}

type Writer struct {
	err error
	w   *bufio.Writer
	cfg *Config
}

func NewWriter(w io.Writer, cfg *Config) *Writer {
	return &Writer{
		w:   bufio.NewWriter(w),
		cfg: cfg,
	}
}

func (w *Writer) outf(x string, args ...interface{}) {
	if w.err != nil {
		return
	}
	_, w.err = fmt.Fprintf(w.w, x+"\n", args...)
}

func (w *Writer) Preamble() {
	w.outf("(generated by svgtocode, (c) Paul Hankin 2020)")
	w.outf("M3S%d (pen up)", w.cfg.PenUp)
	w.outf("G21 (use mm)")
	w.outf("G90 (use absolute coords)")
	w.outf("G1F%d (g1 feed rate %dmm/min)", w.cfg.FeedRate, w.cfg.FeedRate)
}

func (w *Writer) Postamble() {
	w.outf("M3S50 (pen up)")
	w.outf("G0 X0Y0 (home)")
}

func (w *Writer) Move(x, y float64) {
	w.outf("M3\nG4 P0.1\nG0 X%.3f Y%.3f\nM5\nG4 P0.1", x, y)
}

func (w *Writer) Line(x, y float64) {
	w.outf("G1 X%.3f Y%.3f", x, y)
}

func (w *Writer) Flush() error {
	if w.err != nil {
		return w.err
	}
	if err := w.w.Flush(); err != nil {
		return err
	}
	return nil
}
